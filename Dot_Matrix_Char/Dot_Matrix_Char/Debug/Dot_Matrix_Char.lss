
Dot_Matrix_Char.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a0  00800060  00000122  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000862  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063e  00000000  00000000  00000c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039e  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  0000162c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035f  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000330  00000000  00000000  00001a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001d7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 30       	cpi	r26, 0x00	; 0
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  7a:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <wrap>:
	}
}

void wrap(int idx)
{	 
	int temp = CHAR_ARRAY[idx][0] ;
  82:	ac 01       	movw	r20, r24
  84:	42 95       	swap	r20
  86:	52 95       	swap	r21
  88:	50 7f       	andi	r21, 0xF0	; 240
  8a:	54 27       	eor	r21, r20
  8c:	40 7f       	andi	r20, 0xF0	; 240
  8e:	54 27       	eor	r21, r20
  90:	fa 01       	movw	r30, r20
  92:	e0 5a       	subi	r30, 0xA0	; 160
  94:	ff 4f       	sbci	r31, 0xFF	; 255
  96:	60 81       	ld	r22, Z
  98:	71 81       	ldd	r23, Z+1	; 0x01
  9a:	42 59       	subi	r20, 0x92	; 146
  9c:	5f 4f       	sbci	r21, 0xFF	; 255
	for(int j=1 ; j<=7 ; j++){
		
		 CHAR_ARRAY[idx][j-1] = CHAR_ARRAY[idx][j] ;
  9e:	22 81       	ldd	r18, Z+2	; 0x02
  a0:	33 81       	ldd	r19, Z+3	; 0x03
  a2:	21 93       	st	Z+, r18
  a4:	31 93       	st	Z+, r19
}

void wrap(int idx)
{	 
	int temp = CHAR_ARRAY[idx][0] ;
	for(int j=1 ; j<=7 ; j++){
  a6:	e4 17       	cp	r30, r20
  a8:	f5 07       	cpc	r31, r21
  aa:	c9 f7       	brne	.-14     	; 0x9e <wrap+0x1c>
		
		 CHAR_ARRAY[idx][j-1] = CHAR_ARRAY[idx][j] ;
	}
	CHAR_ARRAY[idx][7] = temp ;	 
  ac:	82 95       	swap	r24
  ae:	92 95       	swap	r25
  b0:	90 7f       	andi	r25, 0xF0	; 240
  b2:	98 27       	eor	r25, r24
  b4:	80 7f       	andi	r24, 0xF0	; 240
  b6:	98 27       	eor	r25, r24
  b8:	fc 01       	movw	r30, r24
  ba:	e0 5a       	subi	r30, 0xA0	; 160
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	77 87       	std	Z+15, r23	; 0x0f
  c0:	66 87       	std	Z+14, r22	; 0x0e
  c2:	08 95       	ret

000000c4 <main>:
} 

int main(void)

{
	MCUCSR = (1<<JTD);  MCUCSR = (1<<JTD);
  c4:	80 e8       	ldi	r24, 0x80	; 128
  c6:	84 bf       	out	0x34, r24	; 52
  c8:	84 bf       	out	0x34, r24	; 52

	DDRA = 0xFF;//PORTB,C,D are set as output
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	8a bb       	out	0x1a, r24	; 26

	DDRC = 0xFF;
  ce:	84 bb       	out	0x14, r24	; 20
			{

				for (int j=0;j<8;j++)
				{
					//int t=j;
					 PORTA = (1<<(j)) ; // ROW ,sets the j'th bit
  d0:	c1 e0       	ldi	r28, 0x01	; 1
  d2:	d0 e0       	ldi	r29, 0x00	; 0
	CHAR_ARRAY[idx][7] = temp ;	 
} 

int main(void)

{
  d4:	48 ec       	ldi	r20, 0xC8	; 200
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	17 c0       	rjmp	.+46     	; 0x108 <main+0x44>
			{

				for (int j=0;j<8;j++)
				{
					//int t=j;
					 PORTA = (1<<(j)) ; // ROW ,sets the j'th bit
  da:	9e 01       	movw	r18, r28
  dc:	08 2e       	mov	r0, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <main+0x20>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <main+0x1c>
  e8:	2b bb       	out	0x1b, r18	; 27
				 

					PORTC = CHAR_ARRAY[24][j] & 0b01111111;//show  character (COLUMN)
  ea:	20 81       	ld	r18, Z
  ec:	32 96       	adiw	r30, 0x02	; 2
  ee:	2f 77       	andi	r18, 0x7F	; 127
  f0:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	26 ea       	ldi	r18, 0xA6	; 166
  f4:	2a 95       	dec	r18
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x30>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x36>
	{
			for (int n=0;n<200;n++)//execute 200 times for the eye to catch

			{

				for (int j=0;j<8;j++)
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	88 30       	cpi	r24, 0x08	; 8
  fe:	91 05       	cpc	r25, r1
 100:	61 f7       	brne	.-40     	; 0xda <main+0x16>
 102:	41 50       	subi	r20, 0x01	; 1
 104:	51 09       	sbc	r21, r1
	//CHAR_ARRAY[24][0] = 0x00;
	int hId = 0 ;
	while(1)

	{
			for (int n=0;n<200;n++)//execute 200 times for the eye to catch
 106:	29 f0       	breq	.+10     	; 0x112 <main+0x4e>
 108:	e0 ee       	ldi	r30, 0xE0	; 224
 10a:	f1 e0       	ldi	r31, 0x01	; 1
	CHAR_ARRAY[idx][7] = temp ;	 
} 

int main(void)

{
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	e4 cf       	rjmp	.-56     	; 0xda <main+0x16>
				}
				//PORTA=0x00;//clear screen after show.

			}

		PORTA=0x00;
 112:	1b ba       	out	0x1b, r1	; 27
		//_delay_ms(800);
		wrap(24); hId = (hId+7)%8 ; 
 114:	88 e1       	ldi	r24, 0x18	; 24
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 41 00 	call	0x82	; 0x82 <wrap>

		}
 11c:	db cf       	rjmp	.-74     	; 0xd4 <main+0x10>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
