
Servo_Testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000001a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000741  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ad  00000000  00000000  000009a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000314  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038e  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001676  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001706  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 83 00 	call	0x106	; 0x106 <main>
  74:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <moveClockWise>:
unsigned char TCCR1BVal ;
unsigned char ICR1Val;


void moveClockWise(){
	OCR1A = ICR1 - 4000; // CLockwise control
  7c:	86 b5       	in	r24, 0x26	; 38
  7e:	97 b5       	in	r25, 0x27	; 39
  80:	80 5a       	subi	r24, 0xA0	; 160
  82:	9f 40       	sbci	r25, 0x0F	; 15
  84:	9b bd       	out	0x2b, r25	; 43
  86:	8a bd       	out	0x2a, r24	; 42
  88:	08 95       	ret

0000008a <moveAntiClockWise>:
}


void moveAntiClockWise(){
	OCR1A = ICR1 - 7000; // Anti-clockwise control
  8a:	86 b5       	in	r24, 0x26	; 38
  8c:	97 b5       	in	r25, 0x27	; 39
  8e:	88 55       	subi	r24, 0x58	; 88
  90:	9b 41       	sbci	r25, 0x1B	; 27
  92:	9b bd       	out	0x2b, r25	; 43
  94:	8a bd       	out	0x2a, r24	; 42
  96:	08 95       	ret

00000098 <_resetServo>:
}

void _resetServo(){
	TCCR1A = TCCR1AVal;
  98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <TCCR1AVal>
  9c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = TCCR1BVal;
  9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a2:	8e bd       	out	0x2e, r24	; 46
	ICR1 = ICR1Val;
  a4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <ICR1Val>
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	97 bd       	out	0x27, r25	; 39
  ac:	86 bd       	out	0x26, r24	; 38
  ae:	08 95       	ret

000000b0 <_setServo>:
}

void _setServo(){
	TCCR1A |= 1 << WGM11 | 1 << COM1A1 | 1 << COM1A0;
  b0:	8f b5       	in	r24, 0x2f	; 47
  b2:	82 6c       	ori	r24, 0xC2	; 194
  b4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1<<WGM12 | 1<<WGM13 | 1<<CS10;
  b6:	8e b5       	in	r24, 0x2e	; 46
  b8:	89 61       	ori	r24, 0x19	; 25
  ba:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 19999;
  bc:	8f e1       	ldi	r24, 0x1F	; 31
  be:	9e e4       	ldi	r25, 0x4E	; 78
  c0:	97 bd       	out	0x27, r25	; 39
  c2:	86 bd       	out	0x26, r24	; 38
  c4:	08 95       	ret

000000c6 <debugClockWise>:
}


void debugClockWise(){
	_setServo();
  c6:	0e 94 58 00 	call	0xb0	; 0xb0 <_setServo>
	moveClockWise();
  ca:	0e 94 3e 00 	call	0x7c	; 0x7c <moveClockWise>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f e7       	ldi	r18, 0x7F	; 127
  d0:	8a e1       	ldi	r24, 0x1A	; 26
  d2:	96 e0       	ldi	r25, 0x06	; 6
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <debugClockWise+0xe>
  dc:	00 c0       	rjmp	.+0      	; 0xde <debugClockWise+0x18>
  de:	00 00       	nop
	_delay_ms(250);
	_resetServo();
  e0:	0e 94 4c 00 	call	0x98	; 0x98 <_resetServo>
  e4:	08 95       	ret

000000e6 <debugAntiClockWise>:
}


void debugAntiClockWise(){
	_setServo();
  e6:	0e 94 58 00 	call	0xb0	; 0xb0 <_setServo>
	moveAntiClockWise();
  ea:	0e 94 45 00 	call	0x8a	; 0x8a <moveAntiClockWise>
  ee:	2f e7       	ldi	r18, 0x7F	; 127
  f0:	8a e1       	ldi	r24, 0x1A	; 26
  f2:	96 e0       	ldi	r25, 0x06	; 6
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <debugAntiClockWise+0xe>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <debugAntiClockWise+0x18>
  fe:	00 00       	nop
	_delay_ms(250);
	_resetServo();
 100:	0e 94 4c 00 	call	0x98	; 0x98 <_resetServo>
 104:	08 95       	ret

00000106 <main>:
int main(void)
{


	
	DDRA |= (1<<PA0);
 106:	d0 9a       	sbi	0x1a, 0	; 26
	DDRD = 0XFF;
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	81 bb       	out	0x11, r24	; 17

	TCCR1AVal = TCCR1A;
 10c:	8f b5       	in	r24, 0x2f	; 47
 10e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <TCCR1AVal>
	TCCR1BVal = TCCR1B;
 112:	8e b5       	in	r24, 0x2e	; 46
 114:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	ICR1Val = ICR1;
 118:	86 b5       	in	r24, 0x26	; 38
 11a:	97 b5       	in	r25, 0x27	; 39
 11c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <ICR1Val>

	//debugClockWise();
	while(1){
		debugClockWise();
 120:	0e 94 63 00 	call	0xc6	; 0xc6 <debugClockWise>
		debugAntiClockWise();
 124:	0e 94 73 00 	call	0xe6	; 0xe6 <debugAntiClockWise>
 128:	fb cf       	rjmp	.-10     	; 0x120 <main+0x1a>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
