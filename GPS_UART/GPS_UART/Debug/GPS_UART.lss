
GPS_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000039e  00000432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000fd  00800070  00800070  00000442  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000442  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000103c  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075d  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a6  00000000  00000000  00001d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  000024a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a4  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a00  00000000  00000000  00002c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003688  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  8a:	0c 94 cd 01 	jmp	0x39a	; 0x39a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Show>:
	}
	
	Longitude_Buffer[long_index++] = GGA_Buffer[index++];
	Longitude_Buffer[long_index]   = GGA_Buffer[index]; /* get direction */
	convert_to_degrees(Longitude_Buffer);
	sei();
  92:	95 9a       	sbi	0x12, 5	; 18
  94:	00 00       	nop
  96:	00 00       	nop
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	80 7c       	andi	r24, 0xC0	; 192
  9c:	82 bb       	out	0x12, r24	; 18
  9e:	08 95       	ret

000000a0 <CheckBusy>:
  a0:	17 ba       	out	0x17, r1	; 23
  a2:	97 9a       	sbi	0x12, 7	; 18
  a4:	82 b3       	in	r24, 0x12	; 18
  a6:	88 7f       	andi	r24, 0xF8	; 248
  a8:	82 bb       	out	0x12, r24	; 18
  aa:	c7 9b       	sbis	0x18, 7	; 24
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <CheckBusy+0x16>
  ae:	0e 94 49 00 	call	0x92	; 0x92 <Show>
  b2:	c7 99       	sbic	0x18, 7	; 24
  b4:	fc cf       	rjmp	.-8      	; 0xae <CheckBusy+0xe>
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	87 bb       	out	0x17, r24	; 23
  ba:	08 95       	ret

000000bc <SendCommand>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	0e 94 50 00 	call	0xa0	; 0xa0 <CheckBusy>
  c4:	c8 bb       	out	0x18, r28	; 24
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	8b 77       	andi	r24, 0x7B	; 123
  ca:	82 bb       	out	0x12, r24	; 18
  cc:	0e 94 49 00 	call	0x92	; 0x92 <Show>
  d0:	18 ba       	out	0x18, r1	; 24
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <LCD_init>:
  d6:	81 b3       	in	r24, 0x11	; 17
  d8:	84 6a       	ori	r24, 0xA4	; 164
  da:	81 bb       	out	0x11, r24	; 17
  dc:	8f e6       	ldi	r24, 0x6F	; 111
  de:	97 e1       	ldi	r25, 0x17	; 23
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_init+0xa>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_init+0x10>
  e6:	00 00       	nop
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 5e 00 	call	0xbc	; 0xbc <SendCommand>
  ee:	8f e1       	ldi	r24, 0x1F	; 31
  f0:	9e e4       	ldi	r25, 0x4E	; 78
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_init+0x1c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_init+0x22>
  f8:	00 00       	nop
  fa:	88 e3       	ldi	r24, 0x38	; 56
  fc:	0e 94 5e 00 	call	0xbc	; 0xbc <SendCommand>
 100:	8f e1       	ldi	r24, 0x1F	; 31
 102:	9e e4       	ldi	r25, 0x4E	; 78
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_init+0x2e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_init+0x34>
 10a:	00 00       	nop
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	0e 94 5e 00 	call	0xbc	; 0xbc <SendCommand>
 112:	8f e1       	ldi	r24, 0x1F	; 31
 114:	9e e4       	ldi	r25, 0x4E	; 78
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_init+0x40>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_init+0x46>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <SendCharacter>:
 120:	cf 93       	push	r28
 122:	c8 2f       	mov	r28, r24
 124:	0e 94 50 00 	call	0xa0	; 0xa0 <CheckBusy>
 128:	c8 bb       	out	0x18, r28	; 24
 12a:	97 98       	cbi	0x12, 7	; 18
 12c:	92 9a       	sbi	0x12, 2	; 18
 12e:	0e 94 49 00 	call	0x92	; 0x92 <Show>
 132:	18 ba       	out	0x18, r1	; 24
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <SendString>:
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
 13e:	88 81       	ld	r24, Y
 140:	88 23       	and	r24, r24
 142:	31 f0       	breq	.+12     	; 0x150 <SendString+0x18>
 144:	21 96       	adiw	r28, 0x01	; 1
 146:	0e 94 90 00 	call	0x120	; 0x120 <SendCharacter>
 14a:	89 91       	ld	r24, Y+
 14c:	81 11       	cpse	r24, r1
 14e:	fb cf       	rjmp	.-10     	; 0x146 <SendString+0xe>
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <USART_Init>:
 156:	1b b8       	out	0x0b, r1	; 11
 158:	8a b1       	in	r24, 0x0a	; 10
 15a:	88 69       	ori	r24, 0x98	; 152
 15c:	8a b9       	out	0x0a, r24	; 10
 15e:	80 b5       	in	r24, 0x20	; 32
 160:	86 68       	ori	r24, 0x86	; 134
 162:	80 bd       	out	0x20, r24	; 32
 164:	80 b5       	in	r24, 0x20	; 32
 166:	10 bc       	out	0x20, r1	; 32
 168:	85 e0       	ldi	r24, 0x05	; 5
 16a:	89 b9       	out	0x09, r24	; 9
 16c:	10 bc       	out	0x20, r1	; 32
 16e:	08 95       	ret

00000170 <USART_RxChar>:
 170:	5f 9b       	sbis	0x0b, 7	; 11
 172:	fe cf       	rjmp	.-4      	; 0x170 <USART_RxChar>
 174:	8c b1       	in	r24, 0x0c	; 12
 176:	08 95       	ret

00000178 <main>:
int LCD_pos = 0;


int main() {
	
    GGA_Index=0;
 178:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <GGA_Index+0x1>
 17c:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <GGA_Index>
	memset(GGA_Buffer, 0, Buffer_Size);
 180:	86 e9       	ldi	r24, 0x96	; 150
 182:	e3 e7       	ldi	r30, 0x73	; 115
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	df 01       	movw	r26, r30
 188:	1d 92       	st	X+, r1
 18a:	8a 95       	dec	r24
 18c:	e9 f7       	brne	.-6      	; 0x188 <main+0x10>
	memset(degrees_buffer,0,degrees_buffer_size);
 18e:	84 e1       	ldi	r24, 0x14	; 20
 190:	e9 e0       	ldi	r30, 0x09	; 9
 192:	f1 e0       	ldi	r31, 0x01	; 1
 194:	df 01       	movw	r26, r30
 196:	1d 92       	st	X+, r1
 198:	8a 95       	dec	r24
 19a:	e9 f7       	brne	.-6      	; 0x196 <main+0x1e>
	
    LCD_init();                      /* initialize LCD16x2 */
 19c:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_init>
    //_delay_ms(3000);                 /* wait for GPS receiver to initialize */
    SendCommand(CLEAR_SCREEN);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 5e 00 	call	0xbc	; 0xbc <SendCommand>
    SendCommand(0x80+2);
 1a6:	82 e8       	ldi	r24, 0x82	; 130
 1a8:	0e 94 5e 00 	call	0xbc	; 0xbc <SendCommand>
   
    SendString("$");
 1ac:	89 e6       	ldi	r24, 0x69	; 105
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 9c 00 	call	0x138	; 0x138 <SendString>
    //SendCommand(CLEAR_SCREEN);
    //SendCommand(0x80);
    //unsigned char a;
	USART_Init(9600); 
 1b4:	60 e8       	ldi	r22, 0x80	; 128
 1b6:	75 e2       	ldi	r23, 0x25	; 37
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 ab 00 	call	0x156	; 0x156 <USART_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	bf ef       	ldi	r27, 0xFF	; 255
 1c2:	29 e6       	ldi	r18, 0x69	; 105
 1c4:	88 e1       	ldi	r24, 0x18	; 24
 1c6:	b1 50       	subi	r27, 0x01	; 1
 1c8:	20 40       	sbci	r18, 0x00	; 0
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x4e>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x58>
 1d0:	00 00       	nop
	_delay_ms(5000);               /* initialize USART with 9600 baud rate */
	sei();
 1d2:	78 94       	sei
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <main+0x5c>

000001d6 <__vector_13>:
}


	
ISR (USART_RXC_vect)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	2f 93       	push	r18
 1e2:	3f 93       	push	r19
 1e4:	4f 93       	push	r20
 1e6:	5f 93       	push	r21
 1e8:	6f 93       	push	r22
 1ea:	7f 93       	push	r23
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
	uint8_t oldsrg = SREG;
 1fc:	df b7       	in	r29, 0x3f	; 63
	cli();
 1fe:	f8 94       	cli
	char received_char = USART_RxChar();
 200:	0e 94 b8 00 	call	0x170	; 0x170 <USART_RxChar>
 204:	c8 2f       	mov	r28, r24
	SendCommand(0x80 + LCD_pos);
 206:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 20a:	80 58       	subi	r24, 0x80	; 128
 20c:	0e 94 5e 00 	call	0xbc	; 0xbc <SendCommand>
	SendCharacter(received_char);
 210:	8c 2f       	mov	r24, r28
 212:	0e 94 90 00 	call	0x120	; 0x120 <SendCharacter>
	LCD_pos ++;
 216:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 21a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 21e:	01 96       	adiw	r24, 0x01	; 1
	//SendString("int");
	//LCD_pos ++;
	
	if(LCD_pos == 15){
 220:	8f 30       	cpi	r24, 0x0F	; 15
 222:	91 05       	cpc	r25, r1
 224:	39 f4       	brne	.+14     	; 0x234 <__vector_13+0x5e>
		LCD_pos = 64;
 226:	80 e4       	ldi	r24, 0x40	; 64
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 22e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 232:	12 c0       	rjmp	.+36     	; 0x258 <__vector_13+0x82>
	//	_delay_ms(500);
	}
	else if(LCD_pos == 79){
 234:	8f 34       	cpi	r24, 0x4F	; 79
 236:	91 05       	cpc	r25, r1
 238:	29 f0       	breq	.+10     	; 0x244 <__vector_13+0x6e>
	uint8_t oldsrg = SREG;
	cli();
	char received_char = USART_RxChar();
	SendCommand(0x80 + LCD_pos);
	SendCharacter(received_char);
	LCD_pos ++;
 23a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 23e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 242:	0a c0       	rjmp	.+20     	; 0x258 <__vector_13+0x82>
	if(LCD_pos == 15){
		LCD_pos = 64;
	//	_delay_ms(500);
	}
	else if(LCD_pos == 79){
		LCD_pos = 0;
 244:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__data_end+0x1>
 248:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
		//_delay_ms(1000);
		SendCommand(CLEAR_SCREEN);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 5e 00 	call	0xbc	; 0xbc <SendCommand>
		SendCommand(0x80);
 252:	80 e8       	ldi	r24, 0x80	; 128
 254:	0e 94 5e 00 	call	0xbc	; 0xbc <SendCommand>
	}
	
	
	if(received_char =='$'){
 258:	c4 32       	cpi	r28, 0x24	; 36
 25a:	09 f5       	brne	.+66     	; 0x29e <__vector_13+0xc8>
		SendCommand(0x80);
 25c:	80 e8       	ldi	r24, 0x80	; 128
 25e:	0e 94 5e 00 	call	0xbc	; 0xbc <SendCommand>
		SendCommand(CLEAR_SCREEN);
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 5e 00 	call	0xbc	; 0xbc <SendCommand>
		SendString("$");  
 268:	89 e6       	ldi	r24, 0x69	; 105
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 9c 00 	call	0x138	; 0x138 <SendString>
		//SendCommand(0x80);
		SendCharacter(received_char);
 270:	84 e2       	ldi	r24, 0x24	; 36
 272:	0e 94 90 00 	call	0x120	; 0x120 <SendCharacter>
		LCD_pos ++;
 276:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 27a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 284:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
		
		GGA_Index = 0;
 288:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <GGA_Index+0x1>
 28c:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <GGA_Index>
		CommaCounter = 0;
 290:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <CommaCounter+0x1>
 294:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <CommaCounter>
		IsItGGAString = false;
 298:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <IsItGGAString>
 29c:	6a c0       	rjmp	.+212    	; 0x372 <__vector_13+0x19c>
	}
	else if(IsItGGAString == true){                                             // if true save GGA info. into buffer 
 29e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <IsItGGAString>
 2a2:	88 23       	and	r24, r24
 2a4:	89 f1       	breq	.+98     	; 0x308 <__vector_13+0x132>
		if(received_char == ',' ) GGA_Pointers[CommaCounter++] = GGA_Index;     // store instances of ',' in buffer 
 2a6:	cc 32       	cpi	r28, 0x2C	; 44
 2a8:	99 f4       	brne	.+38     	; 0x2d0 <__vector_13+0xfa>
 2aa:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <CommaCounter>
 2ae:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <CommaCounter+0x1>
 2b2:	9c 01       	movw	r18, r24
 2b4:	2f 5f       	subi	r18, 0xFF	; 255
 2b6:	3f 4f       	sbci	r19, 0xFF	; 255
 2b8:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <CommaCounter+0x1>
 2bc:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <CommaCounter>
 2c0:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <GGA_Index>
 2c4:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <GGA_Index+0x1>
 2c8:	fc 01       	movw	r30, r24
 2ca:	ef 5a       	subi	r30, 0xAF	; 175
 2cc:	fe 4f       	sbci	r31, 0xFE	; 254
 2ce:	20 83       	st	Z, r18
		GGA_Buffer[GGA_Index++] = received_char;
 2d0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <GGA_Index>
 2d4:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <GGA_Index+0x1>
 2d8:	9c 01       	movw	r18, r24
 2da:	2f 5f       	subi	r18, 0xFF	; 255
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
 2de:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <GGA_Index+0x1>
 2e2:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <GGA_Index>
 2e6:	fc 01       	movw	r30, r24
 2e8:	ed 58       	subi	r30, 0x8D	; 141
 2ea:	ff 4f       	sbci	r31, 0xFF	; 255
 2ec:	c0 83       	st	Z, r28
		SendCharacter(received_char);
 2ee:	8c 2f       	mov	r24, r28
 2f0:	0e 94 90 00 	call	0x120	; 0x120 <SendCharacter>
		LCD_pos++;
 2f4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 2f8:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 302:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 306:	35 c0       	rjmp	.+106    	; 0x372 <__vector_13+0x19c>
		//_delay_ms(1000);
	}
	else if(GGA_CODE[0] == 'G' && GGA_CODE[1] == 'G' && GGA_CODE[2] == 'A'){    // check for GGA string
 308:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <GGA_CODE>
 30c:	87 34       	cpi	r24, 0x47	; 71
 30e:	51 f5       	brne	.+84     	; 0x364 <__vector_13+0x18e>
 310:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <GGA_CODE+0x1>
 314:	87 34       	cpi	r24, 0x47	; 71
 316:	31 f5       	brne	.+76     	; 0x364 <__vector_13+0x18e>
 318:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <GGA_CODE+0x2>
 31c:	81 34       	cpi	r24, 0x41	; 65
 31e:	11 f5       	brne	.+68     	; 0x364 <__vector_13+0x18e>
		SendCommand(0x80);
 320:	80 e8       	ldi	r24, 0x80	; 128
 322:	0e 94 5e 00 	call	0xbc	; 0xbc <SendCommand>
		SendString("GGA");
 326:	8b e6       	ldi	r24, 0x6B	; 107
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 9c 00 	call	0x138	; 0x138 <SendString>
		//SendCommand(0x80+3);
		LCD_pos += 3;
 32e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 332:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 336:	03 96       	adiw	r24, 0x03	; 3
 338:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 33c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	83 ec       	ldi	r24, 0xC3	; 195
 344:	99 e0       	ldi	r25, 0x09	; 9
 346:	21 50       	subi	r18, 0x01	; 1
 348:	80 40       	sbci	r24, 0x00	; 0
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <__vector_13+0x170>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <__vector_13+0x17a>
 350:	00 00       	nop
		
		_delay_ms(2000);
			
		IsItGGAString = true;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <IsItGGAString>
		GGA_CODE[0] = 0; GGA_CODE[1] = 0; GGA_CODE[2] = 0;
 358:	ef e3       	ldi	r30, 0x3F	; 63
 35a:	f1 e0       	ldi	r31, 0x01	; 1
 35c:	10 82       	st	Z, r1
 35e:	11 82       	std	Z+1, r1	; 0x01
 360:	12 82       	std	Z+2, r1	; 0x02
 362:	07 c0       	rjmp	.+14     	; 0x372 <__vector_13+0x19c>
	}
	else{
		GGA_CODE[0] = GGA_CODE[1];  GGA_CODE[1] = GGA_CODE[2]; GGA_CODE[2] = received_char; 
 364:	ef e3       	ldi	r30, 0x3F	; 63
 366:	f1 e0       	ldi	r31, 0x01	; 1
 368:	81 81       	ldd	r24, Z+1	; 0x01
 36a:	80 83       	st	Z, r24
 36c:	82 81       	ldd	r24, Z+2	; 0x02
 36e:	81 83       	std	Z+1, r24	; 0x01
 370:	c2 83       	std	Z+2, r28	; 0x02
	}
	SREG = oldsrg;
 372:	df bf       	out	0x3f, r29	; 63
}
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	7f 91       	pop	r23
 386:	6f 91       	pop	r22
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <_exit>:
 39a:	f8 94       	cli

0000039c <__stop_program>:
 39c:	ff cf       	rjmp	.-2      	; 0x39c <__stop_program>
