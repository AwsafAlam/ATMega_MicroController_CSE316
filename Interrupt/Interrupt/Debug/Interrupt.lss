
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005b1  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000529  00000000  00000000  000007f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000022a  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  00000f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002da  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  0000128a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_2>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 82 00 	call	0x104	; 0x104 <main>
  74:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_2>:
#include <avr/interrupt.h>               // for _delay_ms()

volatile unsigned char count=0;

ISR(INT1_vect)//increment
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25

	count = (count+1)%16;
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	01 96       	adiw	r24, 0x01	; 1
  92:	8f 70       	andi	r24, 0x0F	; 15
  94:	90 78       	andi	r25, 0x80	; 128
  96:	99 23       	and	r25, r25
  98:	24 f4       	brge	.+8      	; 0xa2 <__vector_2+0x26>
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	80 6f       	ori	r24, 0xF0	; 240
  9e:	9f 6f       	ori	r25, 0xFF	; 255
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	PORTA = count;
  a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  aa:	8b bb       	out	0x1b, r24	; 27
	//_delay_ms(300);

	GIFR = GIFR | 0b11100000;
  ac:	8a b7       	in	r24, 0x3a	; 58
  ae:	80 6e       	ori	r24, 0xE0	; 224
  b0:	8a bf       	out	0x3a, r24	; 58

}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_3>:


ISR(INT2_vect)//decrement
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25

	count = (count-1+16)%16;
  ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0f 96       	adiw	r24, 0x0f	; 15
  d6:	8f 70       	andi	r24, 0x0F	; 15
  d8:	90 78       	andi	r25, 0x80	; 128
  da:	99 23       	and	r25, r25
  dc:	24 f4       	brge	.+8      	; 0xe6 <__vector_3+0x26>
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	80 6f       	ori	r24, 0xF0	; 240
  e2:	9f 6f       	ori	r25, 0xFF	; 255
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	PORTA = count;
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ee:	8b bb       	out	0x1b, r24	; 27
	//_delay_ms(300);
	GIFR = GIFR | 0b11100000;
  f0:	8a b7       	in	r24, 0x3a	; 58
  f2:	80 6e       	ori	r24, 0xE0	; 224
  f4:	8a bf       	out	0x3a, r24	; 58

}
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <main>:

int main(void)
{
	//DDRB=0;
	DDRA=0xFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	8a bb       	out	0x1a, r24	; 26
	
	MCUCR = MCUCR | 0b00001000;
 108:	85 b7       	in	r24, 0x35	; 53
 10a:	88 60       	ori	r24, 0x08	; 8
 10c:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR & 0b11111011;
 10e:	85 b7       	in	r24, 0x35	; 53
 110:	8b 7f       	andi	r24, 0xFB	; 251
 112:	85 bf       	out	0x35, r24	; 53

	MCUCSR = MCUCSR & 0b10111111;
 114:	84 b7       	in	r24, 0x34	; 52
 116:	8f 7b       	andi	r24, 0xBF	; 191
 118:	84 bf       	out	0x34, r24	; 52

	GICR = GICR | (1 << INT2) | ( 1 << INT1);
 11a:	8b b7       	in	r24, 0x3b	; 59
 11c:	80 6a       	ori	r24, 0xA0	; 160
 11e:	8b bf       	out	0x3b, r24	; 59

	sei();
 120:	78 94       	sei
	
	
	// setting DDR of PORT C

	PORTA = count;
 122:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 126:	8b bb       	out	0x1b, r24	; 27
 128:	ff cf       	rjmp	.-2      	; 0x128 <main+0x24>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
