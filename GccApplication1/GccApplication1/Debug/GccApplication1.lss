
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000064e  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059a  00000000  00000000  00000806  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026d  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001010  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000315  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a9  00000000  00000000  00001349  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
	DDRB = 0x00;
  6c:	17 ba       	out	0x17, r1	; 23
	DDRA = 0xFF;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	8a bb       	out	0x1a, r24	; 26
	int i=0;
	PORTA = 0x00 ;
  72:	1b ba       	out	0x1b, r1	; 27

int main(void)
{
	DDRB = 0x00;
	DDRA = 0xFF;
	int i=0;
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	30 e0       	ldi	r19, 0x00	; 0
	PORTA = 0x00 ;
	// setting DDR of PORT C
	while(1)
	{
		unsigned char x;
		x = PINB;
  78:	86 b3       	in	r24, 0x16	; 22

		//	PORTA = x;

		if( (x&(1<<5))!=0 )
  7a:	85 ff       	sbrs	r24, 5
  7c:	15 c0       	rjmp	.+42     	; 0xa8 <main+0x3c>
		{
			//	printf("%d\n",i) ;
			i = (i+1)%16 ;
  7e:	2f 5f       	subi	r18, 0xFF	; 255
  80:	3f 4f       	sbci	r19, 0xFF	; 255
  82:	a9 01       	movw	r20, r18
  84:	4f 70       	andi	r20, 0x0F	; 15
  86:	50 78       	andi	r21, 0x80	; 128
  88:	55 23       	and	r21, r21
  8a:	34 f4       	brge	.+12     	; 0x98 <main+0x2c>
  8c:	41 50       	subi	r20, 0x01	; 1
  8e:	51 09       	sbc	r21, r1
  90:	40 6f       	ori	r20, 0xF0	; 240
  92:	5f 6f       	ori	r21, 0xFF	; 255
  94:	4f 5f       	subi	r20, 0xFF	; 255
  96:	5f 4f       	sbci	r21, 0xFF	; 255
  98:	9a 01       	movw	r18, r20
			PORTA = i ;
  9a:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	eb e7       	ldi	r30, 0x7B	; 123
  9e:	f2 e9       	ldi	r31, 0x92	; 146
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x34>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
			//	PORTA = 0xFF;
			_delay_ms(150);
		}
		
		if( (x&(1<<6))!=0 )
  a8:	86 ff       	sbrs	r24, 6
  aa:	e6 cf       	rjmp	.-52     	; 0x78 <main+0xc>
		{
			i=(i-1+16)%16 ;
  ac:	21 5f       	subi	r18, 0xF1	; 241
  ae:	3f 4f       	sbci	r19, 0xFF	; 255
  b0:	c9 01       	movw	r24, r18
  b2:	8f 70       	andi	r24, 0x0F	; 15
  b4:	90 78       	andi	r25, 0x80	; 128
  b6:	99 23       	and	r25, r25
  b8:	24 f4       	brge	.+8      	; 0xc2 <main+0x56>
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	80 6f       	ori	r24, 0xF0	; 240
  be:	9f 6f       	ori	r25, 0xFF	; 255
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	9c 01       	movw	r18, r24
			PORTA = i ;
  c4:	8b bb       	out	0x1b, r24	; 27
  c6:	8f e4       	ldi	r24, 0x4F	; 79
  c8:	93 ec       	ldi	r25, 0xC3	; 195
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x5e>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x64>
  d0:	00 00       	nop
  d2:	d2 cf       	rjmp	.-92     	; 0x78 <main+0xc>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
