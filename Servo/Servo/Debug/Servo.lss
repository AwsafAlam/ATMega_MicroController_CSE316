
Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000670  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ad  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029f  00000000  00000000  00000e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031c  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015b  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  64:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <unlock>:

#include <util/delay.h>
#include <avr/interrupt.h>               // for _delay_ms()

void unlock(){
		OCR1A = ICR1 - 500;
  6c:	86 b5       	in	r24, 0x26	; 38
  6e:	97 b5       	in	r25, 0x27	; 39
  70:	84 5f       	subi	r24, 0xF4	; 244
  72:	91 40       	sbci	r25, 0x01	; 1
  74:	9b bd       	out	0x2b, r25	; 43
  76:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	2f ed       	ldi	r18, 0xDF	; 223
  7a:	82 e2       	ldi	r24, 0x22	; 34
  7c:	92 e0       	ldi	r25, 0x02	; 2
  7e:	21 50       	subi	r18, 0x01	; 1
  80:	80 40       	sbci	r24, 0x00	; 0
  82:	90 40       	sbci	r25, 0x00	; 0
  84:	e1 f7       	brne	.-8      	; 0x7e <unlock+0x12>
  86:	00 c0       	rjmp	.+0      	; 0x88 <unlock+0x1c>
  88:	00 00       	nop
		_delay_ms(700);
		OCR1A = ICR1 - 2200;
  8a:	86 b5       	in	r24, 0x26	; 38
  8c:	97 b5       	in	r25, 0x27	; 39
  8e:	88 59       	subi	r24, 0x98	; 152
  90:	98 40       	sbci	r25, 0x08	; 8
  92:	9b bd       	out	0x2b, r25	; 43
  94:	8a bd       	out	0x2a, r24	; 42
  96:	2f ed       	ldi	r18, 0xDF	; 223
  98:	82 e2       	ldi	r24, 0x22	; 34
  9a:	92 e0       	ldi	r25, 0x02	; 2
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <unlock+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <unlock+0x3a>
  a6:	00 00       	nop
  a8:	08 95       	ret

000000aa <__vector_2>:
		_delay_ms(700);
	
}

ISR(INT1_vect)//increment
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	2f 93       	push	r18
  b6:	3f 93       	push	r19
  b8:	4f 93       	push	r20
  ba:	5f 93       	push	r21
  bc:	6f 93       	push	r22
  be:	7f 93       	push	r23
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	af 93       	push	r26
  c6:	bf 93       	push	r27
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	unlock();
  cc:	0e 94 36 00 	call	0x6c	; 0x6c <unlock>
	//_delay_ms(1000);
	GIFR = GIFR | 0b11100000;
  d0:	8a b7       	in	r24, 0x3a	; 58
  d2:	80 6e       	ori	r24, 0xE0	; 224
  d4:	8a bf       	out	0x3a, r24	; 58
}
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	bf 91       	pop	r27
  dc:	af 91       	pop	r26
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	7f 91       	pop	r23
  e4:	6f 91       	pop	r22
  e6:	5f 91       	pop	r21
  e8:	4f 91       	pop	r20
  ea:	3f 91       	pop	r19
  ec:	2f 91       	pop	r18
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <main>:


int main(void)
{
    /* Replace with your application code */
	DDRD = 0xFF;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	81 bb       	out	0x11, r24	; 17
	TCCR1A |= 1 << WGM11 | 1<< COM1A0 | 1<< COM1A1;
  fc:	8f b5       	in	r24, 0x2f	; 47
  fe:	82 6c       	ori	r24, 0xC2	; 194
 100:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM12 | 1 << WGM13 | 1<< CS10;
 102:	8e b5       	in	r24, 0x2e	; 46
 104:	89 61       	ori	r24, 0x19	; 25
 106:	8e bd       	out	0x2e, r24	; 46
	
	ICR1 = 19999;
 108:	8f e1       	ldi	r24, 0x1F	; 31
 10a:	9e e4       	ldi	r25, 0x4E	; 78
 10c:	97 bd       	out	0x27, r25	; 39
 10e:	86 bd       	out	0x26, r24	; 38
		
	
	MCUCR = MCUCR | 0b00001000;
 110:	85 b7       	in	r24, 0x35	; 53
 112:	88 60       	ori	r24, 0x08	; 8
 114:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR & 0b11111011;
 116:	85 b7       	in	r24, 0x35	; 53
 118:	8b 7f       	andi	r24, 0xFB	; 251
 11a:	85 bf       	out	0x35, r24	; 53

	MCUCSR = MCUCSR & 0b10111111;
 11c:	84 b7       	in	r24, 0x34	; 52
 11e:	8f 7b       	andi	r24, 0xBF	; 191
 120:	84 bf       	out	0x34, r24	; 52

	GICR = GICR | ( 1 << INT1);
 122:	8b b7       	in	r24, 0x3b	; 59
 124:	80 68       	ori	r24, 0x80	; 128
 126:	8b bf       	out	0x3b, r24	; 59

	sei();
 128:	78 94       	sei
 12a:	ff cf       	rjmp	.-2      	; 0x12a <main+0x32>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
