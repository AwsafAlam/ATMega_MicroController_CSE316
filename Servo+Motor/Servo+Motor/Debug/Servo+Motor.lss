
Servo+Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ae  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  0000088a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b5  00000000  00000000  00000e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000316  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001406  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <stdio.h>		/* Include std. library file */
#include <util/delay.h>		/* Include Delay header file */

int main(void)
{
	DDRD |= (1<<PD5);	/* Make OC1A pin as output */
  6c:	8d 9a       	sbi	0x11, 5	; 17
	TCNT1 = 0;		/* Set timer1 count zero */
  6e:	1d bc       	out	0x2d, r1	; 45
  70:	1c bc       	out	0x2c, r1	; 44
/*	ICR1 = 2499;		
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
*/
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
  72:	8f b5       	in	r24, 0x2f	; 47
  74:	82 6a       	ori	r24, 0xA2	; 162
  76:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
  78:	8e b5       	in	r24, 0x2e	; 46
  7a:	8b 61       	ori	r24, 0x1B	; 27
  7c:	8e bd       	out	0x2e, r24	; 46

	ICR1=1499;  //fPWM=50Hz (Period = 20ms Standard).
  7e:	8b ed       	ldi	r24, 0xDB	; 219
  80:	95 e0       	ldi	r25, 0x05	; 5
  82:	97 bd       	out	0x27, r25	; 39
  84:	86 bd       	out	0x26, r24	; 38

	DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Out
  86:	81 b3       	in	r24, 0x11	; 17
  88:	80 63       	ori	r24, 0x30	; 48
  8a:	81 bb       	out	0x11, r24	; 17

	while(1)
	{

		OCR1A=97;   //0 degree
  8c:	61 e6       	ldi	r22, 0x61	; 97
  8e:	70 e0       	ldi	r23, 0x00	; 0
		_delay_ms(500);
		OCR1A=316;  //90 degree
  90:	4c e3       	ldi	r20, 0x3C	; 60
  92:	51 e0       	ldi	r21, 0x01	; 1
		_delay_ms(500);
		
		OCR1A=425;  //135 degree
  94:	29 ea       	ldi	r18, 0xA9	; 169
  96:	31 e0       	ldi	r19, 0x01	; 1
		_delay_ms(500);

		OCR1A=535;  //180 degree
  98:	87 e1       	ldi	r24, 0x17	; 23
  9a:	92 e0       	ldi	r25, 0x02	; 2
	DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Out

	while(1)
	{

		OCR1A=97;   //0 degree
  9c:	7b bd       	out	0x2b, r23	; 43
  9e:	6a bd       	out	0x2a, r22	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	af e9       	ldi	r26, 0x9F	; 159
  a2:	e6 e8       	ldi	r30, 0x86	; 134
  a4:	f1 e0       	ldi	r31, 0x01	; 1
  a6:	a1 50       	subi	r26, 0x01	; 1
  a8:	e0 40       	sbci	r30, 0x00	; 0
  aa:	f0 40       	sbci	r31, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x3a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
		_delay_ms(500);
		OCR1A=316;  //90 degree
  b2:	5b bd       	out	0x2b, r21	; 43
  b4:	4a bd       	out	0x2a, r20	; 42
  b6:	af e9       	ldi	r26, 0x9F	; 159
  b8:	e6 e8       	ldi	r30, 0x86	; 134
  ba:	f1 e0       	ldi	r31, 0x01	; 1
  bc:	a1 50       	subi	r26, 0x01	; 1
  be:	e0 40       	sbci	r30, 0x00	; 0
  c0:	f0 40       	sbci	r31, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x50>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x5a>
  c6:	00 00       	nop
		_delay_ms(500);
		
		OCR1A=425;  //135 degree
  c8:	3b bd       	out	0x2b, r19	; 43
  ca:	2a bd       	out	0x2a, r18	; 42
  cc:	af e9       	ldi	r26, 0x9F	; 159
  ce:	e6 e8       	ldi	r30, 0x86	; 134
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	a1 50       	subi	r26, 0x01	; 1
  d4:	e0 40       	sbci	r30, 0x00	; 0
  d6:	f0 40       	sbci	r31, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x66>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x70>
  dc:	00 00       	nop
		_delay_ms(500);

		OCR1A=535;  //180 degree
  de:	9b bd       	out	0x2b, r25	; 43
  e0:	8a bd       	out	0x2a, r24	; 42
  e2:	af e9       	ldi	r26, 0x9F	; 159
  e4:	e6 e8       	ldi	r30, 0x86	; 134
  e6:	f1 e0       	ldi	r31, 0x01	; 1
  e8:	a1 50       	subi	r26, 0x01	; 1
  ea:	e0 40       	sbci	r30, 0x00	; 0
  ec:	f0 40       	sbci	r31, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x7c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x86>
  f2:	00 00       	nop
  f4:	d3 cf       	rjmp	.-90     	; 0x9c <main+0x30>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
