
Bluetooth_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079b  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c6  00000000  00000000  000009bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ed  00000000  00000000  00000f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001274  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031d  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000191  00000000  00000000  000015c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001756  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  74:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_Init>:
#define UART_TxCHAR(ch) { while(!(UCSRA & 1<<UDRE)); UDR=ch; }


void UART_Init()
{
	UCSRB |= (1<<RXEN) ;// | (1<<TXEN);
  7c:	54 9a       	sbi	0x0a, 4	; 10
	UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1)  | (1<<USBS);  // 8 BIT CHARACTER
  7e:	80 b5       	in	r24, 0x20	; 32
  80:	8e 68       	ori	r24, 0x8E	; 142
  82:	80 bd       	out	0x20, r24	; 32
	UBRRL = (unsigned char) BAUD_PRESCALE;
  84:	83 e3       	ldi	r24, 0x33	; 51
  86:	89 b9       	out	0x09, r24	; 9
	UBRRH = (unsigned char)(BAUD_PRESCALE >> 8) ;
  88:	10 bc       	out	0x20, r1	; 32
  8a:	08 95       	ret

0000008c <main>:
volatile unsigned char inc;


int main(void)
{
	UART_Init();
  8c:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_Init>

	DDRA = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<PORTA0); //initial value
  94:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	34 e3       	ldi	r19, 0x34	; 52
  9a:	8c e0       	ldi	r24, 0x0C	; 12
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	30 40       	sbci	r19, 0x00	; 0
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x10>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x1a>
  a6:	00 00       	nop
		PORTA |= (1<<PORTA0); //initial value
		UART_RxCHAR(); //get a CHARACTER
		ch = UDR;

		if(ch == '1'){
			PORTA = 0xFF;
  a8:	9f ef       	ldi	r25, 0xFF	; 255
	PORTA |= (1<<PORTA0); //initial value
	_delay_ms(500);
	unsigned char  ch;
	while(1)
	{
		PORTA |= (1<<PORTA0); //initial value
  aa:	d8 9a       	sbi	0x1b, 0	; 27
		UART_RxCHAR(); //get a CHARACTER
  ac:	5f 9b       	sbis	0x0b, 7	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <main+0x20>
		ch = UDR;
  b0:	8c b1       	in	r24, 0x0c	; 12

		if(ch == '1'){
  b2:	81 33       	cpi	r24, 0x31	; 49
  b4:	a9 f4       	brne	.+42     	; 0xe0 <main+0x54>
			PORTA = 0xFF;
  b6:	9b bb       	out	0x1b, r25	; 27
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	34 e3       	ldi	r19, 0x34	; 52
  bc:	8c e0       	ldi	r24, 0x0C	; 12
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	30 40       	sbci	r19, 0x00	; 0
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x32>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x3c>
  c8:	00 00       	nop
			_delay_ms(500);
			PORTA = 0x00;
  ca:	1b ba       	out	0x1b, r1	; 27
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	34 e3       	ldi	r19, 0x34	; 52
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	30 40       	sbci	r19, 0x00	; 0
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x46>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x50>
  dc:	00 00       	nop
  de:	18 c0       	rjmp	.+48     	; 0x110 <main+0x84>
			_delay_ms(500);
		}
		else if(ch != '\0'){
  e0:	88 23       	and	r24, r24
  e2:	a9 f0       	breq	.+42     	; 0x10e <main+0x82>
			PORTA |= (1<<PORTA2);
  e4:	da 9a       	sbi	0x1b, 2	; 27
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	34 e3       	ldi	r19, 0x34	; 52
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	30 40       	sbci	r19, 0x00	; 0
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x60>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x6a>
  f6:	00 00       	nop
			_delay_ms(500);
			PORTA &= ~(1<<PORTA2);
  f8:	da 98       	cbi	0x1b, 2	; 27
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	34 e3       	ldi	r19, 0x34	; 52
  fe:	8c e0       	ldi	r24, 0x0C	; 12
 100:	21 50       	subi	r18, 0x01	; 1
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x74>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x7e>
 10a:	00 00       	nop
 10c:	01 c0       	rjmp	.+2      	; 0x110 <main+0x84>
			_delay_ms(500);
		}
		else{
			PORTA = ch;
 10e:	1b ba       	out	0x1b, r1	; 27
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	34 e3       	ldi	r19, 0x34	; 52
 114:	8c e0       	ldi	r24, 0x0C	; 12
 116:	21 50       	subi	r18, 0x01	; 1
 118:	30 40       	sbci	r19, 0x00	; 0
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x8a>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x94>
 120:	00 00       	nop
		}

		//if(ch!=13 && ch!=10)
		 //  PORTA = ch; //
		_delay_ms(500);
		PORTA = 0x00;
 122:	1b ba       	out	0x1b, r1	; 27
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	31 ee       	ldi	r19, 0xE1	; 225
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	30 40       	sbci	r19, 0x00	; 0
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x9e>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0xa8>
 134:	00 00       	nop
 136:	b9 cf       	rjmp	.-142    	; 0xaa <main+0x1e>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
